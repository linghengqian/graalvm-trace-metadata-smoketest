[
{
  "name":"[B"
},
{
  "name":"[Lcom.github.dockerjava.api.model.Bind;"
},
{
  "name":"[Lcom.github.dockerjava.api.model.Capability;"
},
{
  "name":"[Lcom.github.dockerjava.api.model.Device;"
},
{
  "name":"[Lcom.github.dockerjava.api.model.ExposedPort;"
},
{
  "name":"[Lcom.github.dockerjava.api.model.Link;"
},
{
  "name":"[Lcom.github.dockerjava.api.model.LxcConf;"
},
{
  "name":"[Lcom.github.dockerjava.api.model.PortBinding;"
},
{
  "name":"[Lcom.github.dockerjava.api.model.Ports$Binding;"
},
{
  "name":"[Lcom.github.dockerjava.api.model.Ulimit;"
},
{
  "name":"[Lcom.github.dockerjava.api.model.Volume;"
},
{
  "name":"[Lcom.github.dockerjava.api.model.VolumeBind;"
},
{
  "name":"[Lcom.github.dockerjava.api.model.VolumeRW;"
},
{
  "name":"[Lcom.github.dockerjava.api.model.VolumesFrom;"
},
{
  "name":"[Ljava.lang.Object;"
},
{
  "name":"[Ljava.lang.String;"
},
{
  "name":"[Lorg.testcontainers.shaded.com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;"
},
{
  "name":"[Lorg.testcontainers.shaded.com.google.common.collect.ImmutableMapEntry;"
},
{
  "name":"[Lsun.security.pkcs.SignerInfo;"
},
{
  "name":"android.app.Application"
},
{
  "name":"com.github.dockerjava.api.command.AsyncDockerCmd",
  "queryAllDeclaredMethods":true
},
{
  "name":"com.github.dockerjava.api.command.CreateContainerCmd",
  "queryAllDeclaredMethods":true
},
{
  "name":"com.github.dockerjava.api.command.CreateContainerResponse",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[
    {"name":"<init>","parameterTypes":[] }, 
    {"name":"setId","parameterTypes":["java.lang.String"] }, 
    {"name":"setWarnings","parameterTypes":["java.lang.String[]"] }
  ]
},
{
  "name":"com.github.dockerjava.api.command.CreateNetworkCmd",
  "queryAllDeclaredMethods":true
},
{
  "name":"com.github.dockerjava.api.command.CreateNetworkResponse",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[
    {"name":"<init>","parameterTypes":[] }, 
    {"name":"setId","parameterTypes":["java.lang.String"] }
  ]
},
{
  "name":"com.github.dockerjava.api.command.DockerCmd",
  "queryAllDeclaredMethods":true
},
{
  "name":"com.github.dockerjava.api.command.ExecCreateCmd",
  "queryAllDeclaredMethods":true
},
{
  "name":"com.github.dockerjava.api.command.ExecCreateCmdResponse",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.github.dockerjava.api.command.ExecStartCmd",
  "queryAllDeclaredMethods":true
},
{
  "name":"com.github.dockerjava.api.command.GraphData",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.github.dockerjava.api.command.GraphDriver",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.github.dockerjava.api.command.HealthState",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"com.github.dockerjava.api.command.HealthStateLog",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"com.github.dockerjava.api.command.InspectContainerResponse",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.github.dockerjava.api.command.InspectContainerResponse$ContainerState",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "queryAllPublicConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":["com.github.dockerjava.api.command.InspectContainerResponse"] }]
},
{
  "name":"com.github.dockerjava.api.command.InspectContainerResponse$Mount",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.github.dockerjava.api.command.InspectContainerResponse$Node",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "queryAllPublicConstructors":true
},
{
  "name":"com.github.dockerjava.api.command.InspectExecResponse",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.github.dockerjava.api.command.InspectExecResponse$Container",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "queryAllPublicConstructors":true
},
{
  "name":"com.github.dockerjava.api.command.InspectExecResponse$ProcessConfig",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "queryAllPublicConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":["com.github.dockerjava.api.command.InspectExecResponse"] }]
},
{
  "name":"com.github.dockerjava.api.command.SyncDockerCmd",
  "queryAllDeclaredMethods":true
},
{
  "name":"com.github.dockerjava.api.model.AccessMode",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true
},
{
  "name":"com.github.dockerjava.api.model.AuthConfig",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[
    {"name":"getAuth","parameterTypes":[] }, 
    {"name":"getEmail","parameterTypes":[] }, 
    {"name":"getIdentitytoken","parameterTypes":[] }, 
    {"name":"getPassword","parameterTypes":[] }, 
    {"name":"getRegistryAddress","parameterTypes":[] }, 
    {"name":"getRegistrytoken","parameterTypes":[] }, 
    {"name":"getStackOrchestrator","parameterTypes":[] }, 
    {"name":"getUsername","parameterTypes":[] }
  ]
},
{
  "name":"com.github.dockerjava.api.model.Bind",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"com.github.dockerjava.api.model.BindOptions",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"com.github.dockerjava.api.model.BindPropagation",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true
},
{
  "name":"com.github.dockerjava.api.model.Binds",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[
    {"name":"fromPrimitive","parameterTypes":["java.lang.String[]"] }, 
    {"name":"toPrimitive","parameterTypes":[] }
  ]
},
{
  "name":"com.github.dockerjava.api.model.BlkioRateDevice",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"com.github.dockerjava.api.model.BlkioWeightDevice",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"com.github.dockerjava.api.model.Capability",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true
},
{
  "name":"com.github.dockerjava.api.model.ClusterInfo",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"com.github.dockerjava.api.model.ContainerConfig",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.github.dockerjava.api.model.ContainerNetwork",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[
    {"name":"<init>","parameterTypes":[] }, 
    {"name":"getAliases","parameterTypes":[] }, 
    {"name":"getEndpointId","parameterTypes":[] }, 
    {"name":"getGateway","parameterTypes":[] }, 
    {"name":"getGlobalIPv6Address","parameterTypes":[] }, 
    {"name":"getGlobalIPv6PrefixLen","parameterTypes":[] }, 
    {"name":"getIpAddress","parameterTypes":[] }, 
    {"name":"getIpPrefixLen","parameterTypes":[] }, 
    {"name":"getIpV6Gateway","parameterTypes":[] }, 
    {"name":"getIpamConfig","parameterTypes":[] }, 
    {"name":"getMacAddress","parameterTypes":[] }, 
    {"name":"getNetworkID","parameterTypes":[] }
  ]
},
{
  "name":"com.github.dockerjava.api.model.ContainerNetwork$Ipam",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"com.github.dockerjava.api.model.Device",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"com.github.dockerjava.api.model.DeviceRequest",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"com.github.dockerjava.api.model.DockerObject",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "methods":[{"name":"getRawValues","parameterTypes":[] }]
},
{
  "name":"com.github.dockerjava.api.model.Driver",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"com.github.dockerjava.api.model.ExposedPort",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"com.github.dockerjava.api.model.ExposedPorts",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[
    {"name":"fromPrimitive","parameterTypes":["java.util.Map"] }, 
    {"name":"toPrimitive","parameterTypes":[] }
  ]
},
{
  "name":"com.github.dockerjava.api.model.ExternalCA",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"com.github.dockerjava.api.model.ExternalCAProtocol",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true
},
{
  "name":"com.github.dockerjava.api.model.HealthCheck",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"com.github.dockerjava.api.model.HostConfig",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[
    {"name":"<init>","parameterTypes":[] }, 
    {"name":"getAutoRemove","parameterTypes":[] }, 
    {"name":"getBlkioDeviceReadBps","parameterTypes":[] }, 
    {"name":"getBlkioDeviceReadIOps","parameterTypes":[] }, 
    {"name":"getBlkioDeviceWriteBps","parameterTypes":[] }, 
    {"name":"getBlkioDeviceWriteIOps","parameterTypes":[] }, 
    {"name":"getBlkioWeight","parameterTypes":[] }, 
    {"name":"getBlkioWeightDevice","parameterTypes":[] }, 
    {"name":"getCapAdd","parameterTypes":[] }, 
    {"name":"getCapDrop","parameterTypes":[] }, 
    {"name":"getCgroup","parameterTypes":[] }, 
    {"name":"getCgroupParent","parameterTypes":[] }, 
    {"name":"getCgroupnsMode","parameterTypes":[] }, 
    {"name":"getConsoleSize","parameterTypes":[] }, 
    {"name":"getContainerIDFile","parameterTypes":[] }, 
    {"name":"getCpuCount","parameterTypes":[] }, 
    {"name":"getCpuPercent","parameterTypes":[] }, 
    {"name":"getCpuPeriod","parameterTypes":[] }, 
    {"name":"getCpuQuota","parameterTypes":[] }, 
    {"name":"getCpuRealtimePeriod","parameterTypes":[] }, 
    {"name":"getCpuRealtimeRuntime","parameterTypes":[] }, 
    {"name":"getCpuShares","parameterTypes":[] }, 
    {"name":"getCpusetCpus","parameterTypes":[] }, 
    {"name":"getCpusetMems","parameterTypes":[] }, 
    {"name":"getDeviceCgroupRules","parameterTypes":[] }, 
    {"name":"getDeviceRequests","parameterTypes":[] }, 
    {"name":"getDevices","parameterTypes":[] }, 
    {"name":"getDiskQuota","parameterTypes":[] }, 
    {"name":"getDns","parameterTypes":[] }, 
    {"name":"getDnsOptions","parameterTypes":[] }, 
    {"name":"getDnsSearch","parameterTypes":[] }, 
    {"name":"getExtraHosts","parameterTypes":[] }, 
    {"name":"getGroupAdd","parameterTypes":[] }, 
    {"name":"getInit","parameterTypes":[] }, 
    {"name":"getIoMaximumBandwidth","parameterTypes":[] }, 
    {"name":"getIoMaximumIOps","parameterTypes":[] }, 
    {"name":"getIpcMode","parameterTypes":[] }, 
    {"name":"getIsolation","parameterTypes":[] }, 
    {"name":"getKernelMemory","parameterTypes":[] }, 
    {"name":"getLxcConf","parameterTypes":[] }, 
    {"name":"getMemory","parameterTypes":[] }, 
    {"name":"getMemoryReservation","parameterTypes":[] }, 
    {"name":"getMemorySwap","parameterTypes":[] }, 
    {"name":"getMemorySwappiness","parameterTypes":[] }, 
    {"name":"getMounts","parameterTypes":[] }, 
    {"name":"getNanoCPUs","parameterTypes":[] }, 
    {"name":"getNetworkMode","parameterTypes":[] }, 
    {"name":"getOomKillDisable","parameterTypes":[] }, 
    {"name":"getOomScoreAdj","parameterTypes":[] }, 
    {"name":"getPidMode","parameterTypes":[] }, 
    {"name":"getPidsLimit","parameterTypes":[] }, 
    {"name":"getPortBindings","parameterTypes":[] }, 
    {"name":"getPrivileged","parameterTypes":[] }, 
    {"name":"getPublishAllPorts","parameterTypes":[] }, 
    {"name":"getReadonlyRootfs","parameterTypes":[] }, 
    {"name":"getRestartPolicy","parameterTypes":[] }, 
    {"name":"getRuntime","parameterTypes":[] }, 
    {"name":"getSecurityOpts","parameterTypes":[] }, 
    {"name":"getShmSize","parameterTypes":[] }, 
    {"name":"getStorageOpt","parameterTypes":[] }, 
    {"name":"getSysctls","parameterTypes":[] }, 
    {"name":"getTmpFs","parameterTypes":[] }, 
    {"name":"getUlimits","parameterTypes":[] }, 
    {"name":"getUsernsMode","parameterTypes":[] }, 
    {"name":"getUtSMode","parameterTypes":[] }, 
    {"name":"getVolumeDriver","parameterTypes":[] }, 
    {"name":"getVolumesFrom","parameterTypes":[] }
  ]
},
{
  "name":"com.github.dockerjava.api.model.Image",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.github.dockerjava.api.model.Info",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.github.dockerjava.api.model.InfoRegistryConfig",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.github.dockerjava.api.model.InfoRegistryConfig$IndexConfig",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.github.dockerjava.api.model.InternetProtocol",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true
},
{
  "name":"com.github.dockerjava.api.model.Isolation",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "methods":[{"name":"fromValue","parameterTypes":["java.lang.String"] }]
},
{
  "name":"com.github.dockerjava.api.model.Link",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"com.github.dockerjava.api.model.Links",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"toPrimitive","parameterTypes":[] }]
},
{
  "name":"com.github.dockerjava.api.model.LocalNodeState",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "methods":[{"name":"forValue","parameterTypes":["java.lang.String"] }]
},
{
  "name":"com.github.dockerjava.api.model.LogConfig",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[
    {"name":"<init>","parameterTypes":[] }, 
    {"name":"setType","parameterTypes":["com.github.dockerjava.api.model.LogConfig$LoggingType"] }
  ]
},
{
  "name":"com.github.dockerjava.api.model.LogConfig$LoggingType",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "methods":[{"name":"fromValue","parameterTypes":["java.lang.String"] }]
},
{
  "name":"com.github.dockerjava.api.model.LxcConf",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"com.github.dockerjava.api.model.Mount",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"com.github.dockerjava.api.model.MountType",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true
},
{
  "name":"com.github.dockerjava.api.model.Network",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.github.dockerjava.api.model.Network$ContainerNetworkConfig",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"com.github.dockerjava.api.model.Network$Ipam",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.github.dockerjava.api.model.Network$Ipam$Config",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.github.dockerjava.api.model.NetworkSettings",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.github.dockerjava.api.model.PeerNode",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"com.github.dockerjava.api.model.Ports",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[
    {"name":"fromPrimitive","parameterTypes":["java.util.Map"] }, 
    {"name":"toPrimitive","parameterTypes":[] }
  ]
},
{
  "name":"com.github.dockerjava.api.model.Ports$Binding",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"com.github.dockerjava.api.model.PropagationMode",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true
},
{
  "name":"com.github.dockerjava.api.model.ResourceVersion",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"com.github.dockerjava.api.model.RestartPolicy",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.github.dockerjava.api.model.SELContext",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true
},
{
  "name":"com.github.dockerjava.api.model.SwarmCAConfig",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"com.github.dockerjava.api.model.SwarmDispatcherConfig",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"com.github.dockerjava.api.model.SwarmInfo",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.github.dockerjava.api.model.SwarmOrchestration",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"com.github.dockerjava.api.model.SwarmRaftConfig",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"com.github.dockerjava.api.model.SwarmSpec",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"com.github.dockerjava.api.model.TaskDefaults",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"com.github.dockerjava.api.model.TmpfsOptions",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"com.github.dockerjava.api.model.Ulimit",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"com.github.dockerjava.api.model.Version",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.github.dockerjava.api.model.VersionComponent",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.github.dockerjava.api.model.VersionPlatform",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.github.dockerjava.api.model.Volume",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":["java.lang.String"] }]
},
{
  "name":"com.github.dockerjava.api.model.VolumeBind",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"com.github.dockerjava.api.model.VolumeBinds",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"com.github.dockerjava.api.model.VolumeOptions",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"com.github.dockerjava.api.model.VolumeRW",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"com.github.dockerjava.api.model.Volumes",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"toPrimitive","parameterTypes":[] }]
},
{
  "name":"com.github.dockerjava.api.model.VolumesFrom",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"com.github.dockerjava.api.model.VolumesRW",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"com.google.common.util.concurrent.AbstractFuture",
  "fields":[
    {"name":"listeners"}, 
    {"name":"value"}, 
    {"name":"waiters"}
  ]
},
{
  "name":"com.google.common.util.concurrent.AbstractFuture$Waiter",
  "fields":[
    {"name":"next"}, 
    {"name":"thread"}
  ]
},
{
  "name":"com.google.protobuf.AbstractMessage",
  "allDeclaredFields":true
},
{
  "name":"com.google.protobuf.AbstractMessageLite",
  "allDeclaredFields":true
},
{
  "name":"com.google.protobuf.ExtensionRegistry",
  "methods":[{"name":"getEmptyRegistry","parameterTypes":[] }]
},
{
  "name":"com.google.protobuf.GeneratedMessageV3",
  "allDeclaredFields":true
},
{
  "name":"com.lingh.impl.AuthClientTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[
    {"name":"<init>","parameterTypes":[] }, 
    {"name":"setupEnv","parameterTypes":[] }, 
    {"name":"testAuth","parameterTypes":[] }
  ]
},
{
  "name":"com.lingh.impl.ClientConnectionManagerTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[
    {"name":"<init>","parameterTypes":[] }, 
    {"name":"testAuthHeaders","parameterTypes":[] }, 
    {"name":"testEndpoints","parameterTypes":[] }, 
    {"name":"testHeaders","parameterTypes":[] }
  ]
},
{
  "name":"com.lingh.impl.ClusterClientTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[
    {"name":"<init>","parameterTypes":[] }, 
    {"name":"testMemberList","parameterTypes":[] }, 
    {"name":"testMemberManagementAddLearner","parameterTypes":[] }
  ]
},
{
  "name":"com.lingh.impl.ElectionTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[
    {"name":"<init>","parameterTypes":[] }, 
    {"name":"setUp","parameterTypes":[] }, 
    {"name":"testEmptyElection","parameterTypes":[] }, 
    {"name":"testIsolatedElection","parameterTypes":[] }, 
    {"name":"testObserveElections","parameterTypes":[] }, 
    {"name":"testProposeValueNotBeingLeader","parameterTypes":[] }, 
    {"name":"testRetryCampaignWithDifferentValue","parameterTypes":[] }, 
    {"name":"testSynchronizationBarrier","parameterTypes":[] }
  ]
},
{
  "name":"com.lingh.impl.KVNamespaceTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[
    {"name":"<init>","parameterTypes":[] }, 
    {"name":"cleanUpCase","parameterTypes":[] }, 
    {"name":"namespaceProvider","parameterTypes":[] }, 
    {"name":"testKV","parameterTypes":[] }, 
    {"name":"testNestedTxn","parameterTypes":[] }, 
    {"name":"testPrefixNamespace","parameterTypes":["io.etcd.jetcd.ByteSequence","com.google.protobuf.ByteString","com.google.protobuf.ByteString","com.google.protobuf.ByteString","com.google.protobuf.ByteString"] }, 
    {"name":"testTxn","parameterTypes":[] }
  ]
},
{
  "name":"com.lingh.impl.KVNamespaceTest$TestKeyValue",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"com.lingh.impl.KVTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[
    {"name":"<init>","parameterTypes":[] }, 
    {"name":"setUp","parameterTypes":[] }, 
    {"name":"testByteSequence","parameterTypes":[] }, 
    {"name":"testDelete","parameterTypes":[] }, 
    {"name":"testGet","parameterTypes":[] }, 
    {"name":"testGetAndDeleteWithPrefix","parameterTypes":[] }, 
    {"name":"testGetSortedPrefix","parameterTypes":[] }, 
    {"name":"testGetWithRev","parameterTypes":[] }, 
    {"name":"testKVClientCanRetryPutOnEtcdRestart","parameterTypes":[] }, 
    {"name":"testNestedTxn","parameterTypes":[] }, 
    {"name":"testPut","parameterTypes":[] }, 
    {"name":"testPutWithNotExistLease","parameterTypes":[] }, 
    {"name":"testTxn","parameterTypes":[] }, 
    {"name":"testTxnForCmpOpNotEqual","parameterTypes":[] }, 
    {"name":"testTxnGetAndDeleteWithPrefix","parameterTypes":[] }, 
    {"name":"waitForReadySemantics","parameterTypes":[] }
  ]
},
{
  "name":"com.lingh.impl.LeaseTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[
    {"name":"<init>","parameterTypes":[] }, 
    {"name":"setUp","parameterTypes":[] }, 
    {"name":"tearDown","parameterTypes":[] }, 
    {"name":"testGrant","parameterTypes":[] }, 
    {"name":"testGrantWithTimeout","parameterTypes":[] }, 
    {"name":"testKeepAlive","parameterTypes":[] }, 
    {"name":"testKeepAliveOnce","parameterTypes":[] }, 
    {"name":"testRevoke","parameterTypes":[] }, 
    {"name":"testTimeToLive","parameterTypes":[] }, 
    {"name":"testTimeToLiveWithKeys","parameterTypes":[] }
  ]
},
{
  "name":"com.lingh.impl.LoadBalancerTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[
    {"name":"<init>","parameterTypes":[] }, 
    {"name":"testPickFirstBalancerFactory","parameterTypes":[] }, 
    {"name":"testRoundRobinLoadBalancerFactory","parameterTypes":[] }
  ]
},
{
  "name":"com.lingh.impl.LockTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[
    {"name":"<init>","parameterTypes":[] }, 
    {"name":"parameters","parameterTypes":[] }, 
    {"name":"setUp","parameterTypes":[] }, 
    {"name":"setUpEach","parameterTypes":[] }, 
    {"name":"tearDownEach","parameterTypes":[] }, 
    {"name":"testLockAndUnlock","parameterTypes":["boolean"] }, 
    {"name":"testLockSegregationByNamespaces","parameterTypes":[] }, 
    {"name":"testLockWithLease","parameterTypes":["boolean"] }, 
    {"name":"testLockWithNotExistingLease","parameterTypes":["boolean"] }, 
    {"name":"testLockWithoutLease","parameterTypes":["boolean"] }
  ]
},
{
  "name":"com.lingh.impl.MaintenanceTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[
    {"name":"<init>","parameterTypes":[] }, 
    {"name":"setUp","parameterTypes":[] }, 
    {"name":"testAlarmList","parameterTypes":[] }, 
    {"name":"testDefragment","parameterTypes":[] }, 
    {"name":"testHashKV","parameterTypes":[] }, 
    {"name":"testSnapshotChunks","parameterTypes":[] }, 
    {"name":"testSnapshotToOutputStream","parameterTypes":[] }, 
    {"name":"testStatusMember","parameterTypes":[] }
  ]
},
{
  "name":"com.lingh.impl.MaintenanceUnitTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[
    {"name":"<init>","parameterTypes":[] }, 
    {"name":"setUp","parameterTypes":[] }, 
    {"name":"tearDown","parameterTypes":[] }, 
    {"name":"testConnectionError","parameterTypes":[] }, 
    {"name":"testWrite","parameterTypes":[] }
  ]
},
{
  "name":"com.lingh.impl.SslTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[
    {"name":"<init>","parameterTypes":[] }, 
    {"name":"testSimpleSllSetup","parameterTypes":[] }
  ]
},
{
  "name":"com.lingh.impl.TestUtil",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"com.lingh.impl.TestUtil$TestCondition"
},
{
  "name":"com.lingh.impl.TxnResponseTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[
    {"name":"<init>","parameterTypes":[] }, 
    {"name":"getDeleteResponsesTest","parameterTypes":[] }, 
    {"name":"getGetResponsesTest","parameterTypes":[] }, 
    {"name":"getPutResponsesTest","parameterTypes":[] }, 
    {"name":"getTxnResponsesTest","parameterTypes":[] }, 
    {"name":"setUp","parameterTypes":[] }
  ]
},
{
  "name":"com.lingh.impl.UtilTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[
    {"name":"<init>","parameterTypes":[] }, 
    {"name":"testAuthErrorIsNotRetryable","parameterTypes":[] }, 
    {"name":"testAuthStoreExpired","parameterTypes":[] }, 
    {"name":"testUnavailableErrorIsRetryable","parameterTypes":[] }
  ]
},
{
  "name":"com.lingh.impl.WatchErrorTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[
    {"name":"<init>","parameterTypes":[] }, 
    {"name":"testWatchOnError","parameterTypes":["java.lang.String"] }
  ]
},
{
  "name":"com.lingh.impl.WatchResumeTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.lingh.impl.WatchTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[
    {"name":"<init>","parameterTypes":[] }, 
    {"name":"parameters","parameterTypes":[] }, 
    {"name":"testCancelledWatchGetsClosed","parameterTypes":["io.etcd.jetcd.Client"] }, 
    {"name":"testMultipleWatch","parameterTypes":["io.etcd.jetcd.Client"] }, 
    {"name":"testNamespacedAndNotNamespacedClient","parameterTypes":[] }, 
    {"name":"testProgressRequest","parameterTypes":["io.etcd.jetcd.Client"] }, 
    {"name":"testWatchAndGet","parameterTypes":["io.etcd.jetcd.Client"] }, 
    {"name":"testWatchClose","parameterTypes":["io.etcd.jetcd.Client"] }, 
    {"name":"testWatchCompacted","parameterTypes":["io.etcd.jetcd.Client"] }, 
    {"name":"testWatchFutureRevisionIsNotOverwrittenOnCreation","parameterTypes":["io.etcd.jetcd.Client"] }, 
    {"name":"testWatchOnDelete","parameterTypes":["io.etcd.jetcd.Client"] }, 
    {"name":"testWatchOnPut","parameterTypes":["io.etcd.jetcd.Client"] }
  ]
},
{
  "name":"com.lingh.impl.WatchTokenExpireTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[
    {"name":"<init>","parameterTypes":[] }, 
    {"name":"testRefreshExpiredToken","parameterTypes":[] }
  ]
},
{
  "name":"com.lingh.options.OptionsUtilTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[
    {"name":"<init>","parameterTypes":[] }, 
    {"name":"aaPlus1","parameterTypes":[] }, 
    {"name":"axffPlus1","parameterTypes":[] }, 
    {"name":"xffPlus1","parameterTypes":[] }
  ]
},
{
  "name":"com.sun.crypto.provider.AESCipher$General",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.sun.crypto.provider.ARCFOURCipher",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.sun.crypto.provider.ChaCha20Cipher$ChaCha20Poly1305",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.sun.crypto.provider.DESCipher",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.sun.crypto.provider.DESedeCipher",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.sun.crypto.provider.DHParameters",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.sun.crypto.provider.GaloisCounterMode$AESGCM",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.sun.crypto.provider.TlsKeyMaterialGenerator",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.sun.crypto.provider.TlsMasterSecretGenerator",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.sun.crypto.provider.TlsPrfGenerator$V12",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.etcd.jetcd.ByteSequence",
  "allDeclaredFields":true
},
{
  "name":"io.etcd.jetcd.KeyValue",
  "allDeclaredFields":true,
  "methods":[{"name":"getValue","parameterTypes":[] }]
},
{
  "name":"io.etcd.jetcd.api.Event",
  "allDeclaredFields":true,
  "methods":[{"name":"getUnknownFields","parameterTypes":[] }]
},
{
  "name":"io.etcd.jetcd.api.KeyValue",
  "allDeclaredFields":true,
  "methods":[{"name":"getUnknownFields","parameterTypes":[] }]
},
{
  "name":"io.etcd.jetcd.api.ResponseHeader",
  "allDeclaredFields":true,
  "methods":[{"name":"getUnknownFields","parameterTypes":[] }]
},
{
  "name":"io.etcd.jetcd.api.WatchResponse",
  "allDeclaredFields":true,
  "methods":[{"name":"getUnknownFields","parameterTypes":[] }]
},
{
  "name":"io.etcd.jetcd.common.exception.CompactedException",
  "methods":[{"name":"getCompactedRevision","parameterTypes":[] }]
},
{
  "name":"io.etcd.jetcd.impl.AbstractResponse",
  "allDeclaredFields":true,
  "methods":[
    {"name":"getHeader","parameterTypes":[] }, 
    {"name":"getResponse","parameterTypes":[] }, 
    {"name":"getResponseHeader","parameterTypes":[] }
  ]
},
{
  "name":"io.etcd.jetcd.impl.AbstractResponse$HeaderImpl",
  "allDeclaredFields":true
},
{
  "name":"io.etcd.jetcd.impl.ClientBuilderTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[
    {"name":"<init>","parameterTypes":[] }, 
    {"name":"namespaceProvider","parameterTypes":[] }, 
    {"name":"testBuild_WithoutEndpoints","parameterTypes":[] }, 
    {"name":"testDefaultNamespace","parameterTypes":[] }, 
    {"name":"testEndPoints_Null","parameterTypes":[] }, 
    {"name":"testEndPoints_Verify_Empty","parameterTypes":[] }, 
    {"name":"testEndPoints_Verify_SomeEmpty","parameterTypes":[] }, 
    {"name":"testMaxInboundMessageSize","parameterTypes":[] }, 
    {"name":"testNamespace","parameterTypes":["io.etcd.jetcd.ByteSequence","io.etcd.jetcd.ByteSequence"] }
  ]
},
{
  "name":"io.etcd.jetcd.impl.WatchUnitTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[
    {"name":"<init>","parameterTypes":[] }, 
    {"name":"setUp","parameterTypes":[] }, 
    {"name":"tearDown","parameterTypes":[] }, 
    {"name":"testCreateWatcherAfterClientClosed","parameterTypes":[] }, 
    {"name":"testWatchOnSendingWatchCreateRequest","parameterTypes":[] }, 
    {"name":"testWatchOnUnrecoverableConnectionIssue","parameterTypes":[] }, 
    {"name":"testWatcherCreateOnCancellationWithNoReason","parameterTypes":[] }, 
    {"name":"testWatcherCreateOnCancellationWithReason","parameterTypes":[] }, 
    {"name":"testWatcherCreateOnCompactionError","parameterTypes":[] }, 
    {"name":"testWatcherCreateOnInvalidWatchID","parameterTypes":[] }, 
    {"name":"testWatcherDelete","parameterTypes":[] }, 
    {"name":"testWatcherListenForMultiplePuts","parameterTypes":[] }, 
    {"name":"testWatcherListenOnResponse","parameterTypes":[] }, 
    {"name":"testWatcherListenOnWatchClientClose","parameterTypes":[] }, 
    {"name":"testWatcherListenOnWatcherClose","parameterTypes":[] }, 
    {"name":"testWatcherWithRequireLeaderErrsOutOnNoLeader","parameterTypes":[] }
  ]
},
{
  "name":"io.etcd.jetcd.op.TxnTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[
    {"name":"<init>","parameterTypes":[] }, 
    {"name":"testElses","parameterTypes":[] }, 
    {"name":"testIfAfterElse","parameterTypes":[] }, 
    {"name":"testIfAfterThen","parameterTypes":[] }, 
    {"name":"testIfs","parameterTypes":[] }, 
    {"name":"testThenAfterElse","parameterTypes":[] }, 
    {"name":"testThens","parameterTypes":[] }
  ]
},
{
  "name":"io.etcd.jetcd.watch.WatchEvent",
  "allDeclaredFields":true,
  "methods":[
    {"name":"getEventType","parameterTypes":[] }, 
    {"name":"getKeyValue","parameterTypes":[] }, 
    {"name":"getPrevKV","parameterTypes":[] }
  ]
},
{
  "name":"io.etcd.jetcd.watch.WatchResponse",
  "allDeclaredFields":true,
  "methods":[{"name":"getEvents","parameterTypes":[] }]
},
{
  "name":"io.grpc.census.InternalCensusStatsAccessor"
},
{
  "name":"io.grpc.census.InternalCensusTracingAccessor"
},
{
  "name":"io.grpc.internal.AbstractManagedChannelImplBuilder",
  "fields":[{"name":"maxInboundMessageSize"}]
},
{
  "name":"io.grpc.internal.DnsNameResolverProvider"
},
{
  "name":"io.grpc.internal.PickFirstLoadBalancerProvider"
},
{
  "name":"io.grpc.netty.AbstractNettyHandler",
  "methods":[
    {"name":"channelActive","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, 
    {"name":"exceptionCaught","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.lang.Throwable"] }
  ]
},
{
  "name":"io.grpc.netty.NettyClientHandler",
  "methods":[
    {"name":"channelInactive","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, 
    {"name":"close","parameterTypes":["io.netty.channel.ChannelHandlerContext","io.netty.channel.ChannelPromise"] }, 
    {"name":"write","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.lang.Object","io.netty.channel.ChannelPromise"] }
  ]
},
{
  "name":"io.grpc.netty.NettyServer$1"
},
{
  "name":"io.grpc.netty.NettyServerHandler",
  "methods":[
    {"name":"channelInactive","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, 
    {"name":"close","parameterTypes":["io.netty.channel.ChannelHandlerContext","io.netty.channel.ChannelPromise"] }, 
    {"name":"write","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.lang.Object","io.netty.channel.ChannelPromise"] }
  ]
},
{
  "name":"io.grpc.netty.ProtocolNegotiators$ClientTlsHandler"
},
{
  "name":"io.grpc.netty.ProtocolNegotiators$GrpcNegotiationHandler",
  "methods":[{"name":"userEventTriggered","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.lang.Object"] }]
},
{
  "name":"io.grpc.netty.ProtocolNegotiators$ProtocolNegotiationHandler",
  "methods":[{"name":"userEventTriggered","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.lang.Object"] }]
},
{
  "name":"io.grpc.netty.ProtocolNegotiators$WaitUntilActiveHandler",
  "methods":[{"name":"channelActive","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }]
},
{
  "name":"io.grpc.netty.WriteBufferingAndExceptionHandler",
  "methods":[
    {"name":"channelInactive","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, 
    {"name":"channelRead","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.lang.Object"] }, 
    {"name":"close","parameterTypes":["io.netty.channel.ChannelHandlerContext","io.netty.channel.ChannelPromise"] }, 
    {"name":"connect","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.net.SocketAddress","java.net.SocketAddress","io.netty.channel.ChannelPromise"] }, 
    {"name":"exceptionCaught","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.lang.Throwable"] }, 
    {"name":"flush","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, 
    {"name":"write","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.lang.Object","io.netty.channel.ChannelPromise"] }
  ]
},
{
  "name":"io.grpc.override.ContextStorageOverride"
},
{
  "name":"io.grpc.util.SecretRoundRobinLoadBalancerProvider$Provider"
},
{
  "name":"io.netty.bootstrap.ServerBootstrap$1"
},
{
  "name":"io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor",
  "methods":[
    {"name":"channelRead","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.lang.Object"] }, 
    {"name":"exceptionCaught","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.lang.Throwable"] }
  ]
},
{
  "name":"io.netty.buffer.AbstractByteBufAllocator",
  "queryAllDeclaredMethods":true
},
{
  "name":"io.netty.buffer.AbstractReferenceCountedByteBuf",
  "fields":[{"name":"refCnt"}]
},
{
  "name":"io.netty.channel.ChannelDuplexHandler",
  "methods":[
    {"name":"bind","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.net.SocketAddress","io.netty.channel.ChannelPromise"] }, 
    {"name":"close","parameterTypes":["io.netty.channel.ChannelHandlerContext","io.netty.channel.ChannelPromise"] }, 
    {"name":"connect","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.net.SocketAddress","java.net.SocketAddress","io.netty.channel.ChannelPromise"] }, 
    {"name":"deregister","parameterTypes":["io.netty.channel.ChannelHandlerContext","io.netty.channel.ChannelPromise"] }, 
    {"name":"disconnect","parameterTypes":["io.netty.channel.ChannelHandlerContext","io.netty.channel.ChannelPromise"] }, 
    {"name":"flush","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, 
    {"name":"read","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, 
    {"name":"write","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.lang.Object","io.netty.channel.ChannelPromise"] }
  ]
},
{
  "name":"io.netty.channel.ChannelInboundHandlerAdapter",
  "methods":[
    {"name":"channelActive","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, 
    {"name":"channelInactive","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, 
    {"name":"channelRead","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.lang.Object"] }, 
    {"name":"channelReadComplete","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, 
    {"name":"channelRegistered","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, 
    {"name":"channelUnregistered","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, 
    {"name":"channelWritabilityChanged","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, 
    {"name":"exceptionCaught","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.lang.Throwable"] }, 
    {"name":"userEventTriggered","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.lang.Object"] }
  ]
},
{
  "name":"io.netty.channel.ChannelInitializer",
  "methods":[
    {"name":"channelRegistered","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, 
    {"name":"exceptionCaught","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.lang.Throwable"] }
  ]
},
{
  "name":"io.netty.channel.DefaultChannelPipeline$HeadContext",
  "methods":[
    {"name":"bind","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.net.SocketAddress","io.netty.channel.ChannelPromise"] }, 
    {"name":"channelActive","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, 
    {"name":"channelInactive","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, 
    {"name":"channelRead","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.lang.Object"] }, 
    {"name":"channelReadComplete","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, 
    {"name":"channelRegistered","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, 
    {"name":"channelUnregistered","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, 
    {"name":"channelWritabilityChanged","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, 
    {"name":"close","parameterTypes":["io.netty.channel.ChannelHandlerContext","io.netty.channel.ChannelPromise"] }, 
    {"name":"connect","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.net.SocketAddress","java.net.SocketAddress","io.netty.channel.ChannelPromise"] }, 
    {"name":"deregister","parameterTypes":["io.netty.channel.ChannelHandlerContext","io.netty.channel.ChannelPromise"] }, 
    {"name":"disconnect","parameterTypes":["io.netty.channel.ChannelHandlerContext","io.netty.channel.ChannelPromise"] }, 
    {"name":"exceptionCaught","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.lang.Throwable"] }, 
    {"name":"flush","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, 
    {"name":"read","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, 
    {"name":"userEventTriggered","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.lang.Object"] }, 
    {"name":"write","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.lang.Object","io.netty.channel.ChannelPromise"] }
  ]
},
{
  "name":"io.netty.channel.DefaultChannelPipeline$TailContext",
  "methods":[
    {"name":"channelActive","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, 
    {"name":"channelInactive","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, 
    {"name":"channelRead","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.lang.Object"] }, 
    {"name":"channelReadComplete","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, 
    {"name":"channelRegistered","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, 
    {"name":"channelUnregistered","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, 
    {"name":"channelWritabilityChanged","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, 
    {"name":"exceptionCaught","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.lang.Throwable"] }, 
    {"name":"userEventTriggered","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.lang.Object"] }
  ]
},
{
  "name":"io.netty.channel.epoll.Epoll"
},
{
  "name":"io.netty.channel.socket.nio.NioSocketChannel",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.netty.handler.codec.ByteToMessageDecoder",
  "methods":[
    {"name":"channelRead","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.lang.Object"] }, 
    {"name":"userEventTriggered","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.lang.Object"] }
  ]
},
{
  "name":"io.netty.handler.codec.http2.Http2ConnectionHandler",
  "methods":[
    {"name":"bind","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.net.SocketAddress","io.netty.channel.ChannelPromise"] }, 
    {"name":"channelReadComplete","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, 
    {"name":"channelWritabilityChanged","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, 
    {"name":"connect","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.net.SocketAddress","java.net.SocketAddress","io.netty.channel.ChannelPromise"] }, 
    {"name":"deregister","parameterTypes":["io.netty.channel.ChannelHandlerContext","io.netty.channel.ChannelPromise"] }, 
    {"name":"disconnect","parameterTypes":["io.netty.channel.ChannelHandlerContext","io.netty.channel.ChannelPromise"] }, 
    {"name":"flush","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, 
    {"name":"read","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }
  ]
},
{
  "name":"io.netty.handler.ssl.SslHandler",
  "methods":[
    {"name":"bind","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.net.SocketAddress","io.netty.channel.ChannelPromise"] }, 
    {"name":"channelActive","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, 
    {"name":"channelInactive","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, 
    {"name":"channelReadComplete","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, 
    {"name":"close","parameterTypes":["io.netty.channel.ChannelHandlerContext","io.netty.channel.ChannelPromise"] }, 
    {"name":"connect","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.net.SocketAddress","java.net.SocketAddress","io.netty.channel.ChannelPromise"] }, 
    {"name":"deregister","parameterTypes":["io.netty.channel.ChannelHandlerContext","io.netty.channel.ChannelPromise"] }, 
    {"name":"disconnect","parameterTypes":["io.netty.channel.ChannelHandlerContext","io.netty.channel.ChannelPromise"] }, 
    {"name":"exceptionCaught","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.lang.Throwable"] }, 
    {"name":"flush","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, 
    {"name":"read","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, 
    {"name":"write","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.lang.Object","io.netty.channel.ChannelPromise"] }
  ]
},
{
  "name":"io.netty.internal.tcnative.SSLContext"
},
{
  "name":"io.netty.util.AbstractReferenceCounted",
  "fields":[{"name":"refCnt"}]
},
{
  "name":"io.netty.util.ReferenceCountUtil",
  "queryAllDeclaredMethods":true
},
{
  "name":"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueColdProducerFields",
  "fields":[{"name":"producerLimit"}]
},
{
  "name":"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueConsumerFields",
  "fields":[{"name":"consumerIndex"}]
},
{
  "name":"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueProducerFields",
  "fields":[{"name":"producerIndex"}]
},
{
  "name":"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueConsumerIndexField",
  "fields":[{"name":"consumerIndex"}]
},
{
  "name":"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerIndexField",
  "fields":[{"name":"producerIndex"}]
},
{
  "name":"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerLimitField",
  "fields":[{"name":"producerLimit"}]
},
{
  "name":"io.perfmark.impl.SecretPerfMarkImpl$PerfMarkImpl"
},
{
  "name":"io.vertx.core.logging.Log4j2LogDelegateFactory",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.vertx.core.logging.SLF4JLogDelegateFactory",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"java.io.Closeable",
  "queryAllDeclaredMethods":true
},
{
  "name":"java.io.Serializable",
  "queryAllDeclaredMethods":true
},
{
  "name":"java.lang.AutoCloseable",
  "queryAllDeclaredMethods":true
},
{
  "name":"java.lang.Boolean",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"java.lang.Byte",
  "methods":[{"name":"equals","parameterTypes":["java.lang.Object"] }]
},
{
  "name":"java.lang.Comparable",
  "queryAllDeclaredMethods":true
},
{
  "name":"java.lang.Enum",
  "queryAllDeclaredMethods":true
},
{
  "name":"java.lang.Integer",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"equals","parameterTypes":["java.lang.Object"] }]
},
{
  "name":"java.lang.Long",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"equals","parameterTypes":["java.lang.Object"] }]
},
{
  "name":"java.lang.Number",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true
},
{
  "name":"java.lang.Object",
  "queryAllDeclaredMethods":true,
  "methods":[{"name":"toString","parameterTypes":[] }]
},
{
  "name":"java.lang.ProcessHandle",
  "methods":[
    {"name":"current","parameterTypes":[] }, 
    {"name":"pid","parameterTypes":[] }
  ]
},
{
  "name":"java.lang.StackWalker",
  "methods":[
    {"name":"getInstance","parameterTypes":["java.util.Set","int"] }, 
    {"name":"walk","parameterTypes":["java.util.function.Function"] }
  ]
},
{
  "name":"java.lang.StackWalker$Option"
},
{
  "name":"java.lang.StackWalker$StackFrame",
  "methods":[
    {"name":"getClassName","parameterTypes":[] }, 
    {"name":"getFileName","parameterTypes":[] }, 
    {"name":"getLineNumber","parameterTypes":[] }, 
    {"name":"getMethodName","parameterTypes":[] }
  ]
},
{
  "name":"java.lang.String"
},
{
  "name":"java.lang.constant.Constable",
  "queryAllDeclaredMethods":true
},
{
  "name":"java.lang.constant.ConstantDesc",
  "queryAllDeclaredMethods":true
},
{
  "name":"java.lang.invoke.MethodHandle"
},
{
  "name":"java.lang.management.ManagementFactory",
  "methods":[{"name":"getRuntimeMXBean","parameterTypes":[] }]
},
{
  "name":"java.lang.management.RuntimeMXBean",
  "methods":[{"name":"getInputArguments","parameterTypes":[] }]
},
{
  "name":"java.lang.reflect.InvocationHandler",
  "methods":[{"name":"invokeDefault","parameterTypes":["java.lang.Object","java.lang.reflect.Method","java.lang.Object[]"] }]
},
{
  "name":"java.net.UnixDomainSocketAddress",
  "methods":[{"name":"of","parameterTypes":["java.lang.String"] }]
},
{
  "name":"java.nio.Bits",
  "methods":[{"name":"unaligned","parameterTypes":[] }]
},
{
  "name":"java.nio.Buffer",
  "fields":[{"name":"address"}]
},
{
  "name":"java.nio.ByteBuffer",
  "methods":[{"name":"alignedSlice","parameterTypes":["int"] }]
},
{
  "name":"java.nio.DirectByteBuffer",
  "methods":[{"name":"<init>","parameterTypes":["long","int"] }]
},
{
  "name":"java.nio.channels.spi.SelectorProvider",
  "methods":[
    {"name":"openServerSocketChannel","parameterTypes":["java.net.ProtocolFamily"] }, 
    {"name":"openSocketChannel","parameterTypes":["java.net.ProtocolFamily"] }
  ]
},
{
  "name":"java.security.AlgorithmParametersSpi"
},
{
  "name":"java.security.KeyStoreSpi"
},
{
  "name":"java.security.SecureRandomParameters"
},
{
  "name":"java.security.interfaces.RSAPrivateKey"
},
{
  "name":"java.security.interfaces.RSAPublicKey"
},
{
  "name":"java.util.ArrayList",
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"java.util.Date"
},
{
  "name":"java.util.HashMap",
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"java.util.HashSet"
},
{
  "name":"java.util.LinkedHashMap",
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"java.util.LinkedHashSet"
},
{
  "name":"java.util.concurrent.ArrayBlockingQueue"
},
{
  "name":"java.util.concurrent.ScheduledThreadPoolExecutor",
  "methods":[{"name":"setRemoveOnCancelPolicy","parameterTypes":["boolean"] }]
},
{
  "name":"java.util.concurrent.atomic.LongAdder",
  "queryAllPublicConstructors":true,
  "methods":[
    {"name":"<init>","parameterTypes":[] }, 
    {"name":"add","parameterTypes":["long"] }, 
    {"name":"sum","parameterTypes":[] }
  ]
},
{
  "name":"java.util.concurrent.locks.AbstractOwnableSynchronizer"
},
{
  "name":"java.util.concurrent.locks.AbstractQueuedSynchronizer"
},
{
  "name":"java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject"
},
{
  "name":"java.util.concurrent.locks.ReentrantLock"
},
{
  "name":"java.util.concurrent.locks.ReentrantLock$NonfairSync"
},
{
  "name":"java.util.concurrent.locks.ReentrantLock$Sync"
},
{
  "name":"java.util.function.Consumer",
  "queryAllPublicMethods":true
},
{
  "name":"javax.net.ssl.SSLEngine",
  "methods":[
    {"name":"getApplicationProtocol","parameterTypes":[] }, 
    {"name":"getHandshakeApplicationProtocol","parameterTypes":[] }, 
    {"name":"getHandshakeApplicationProtocolSelector","parameterTypes":[] }, 
    {"name":"setHandshakeApplicationProtocolSelector","parameterTypes":["java.util.function.BiFunction"] }
  ]
},
{
  "name":"javax.net.ssl.SSLParameters",
  "methods":[{"name":"setApplicationProtocols","parameterTypes":["java.lang.String[]"] }]
},
{
  "name":"javax.security.auth.x500.X500Principal",
  "fields":[{"name":"thisX500Name"}],
  "methods":[{"name":"<init>","parameterTypes":["sun.security.x509.X500Name"] }]
},
{
  "name":"jdk.internal.misc.Unsafe",
  "methods":[{"name":"getUnsafe","parameterTypes":[] }]
},
{
  "name":"libcore.io.Memory"
},
{
  "name":"org.bouncycastle.jsse.provider.BouncyCastleJsseProvider"
},
{
  "name":"org.eclipse.jetty.alpn.ALPN"
},
{
  "name":"org.eclipse.jetty.npn.NextProtoNego"
},
{
  "name":"org.mockito.Mock",
  "queryAllPublicMethods":true
},
{
  "name":"org.mockito.configuration.MockitoConfiguration"
},
{
  "name":"org.mockito.internal.configuration.DefaultDoNotMockEnforcer",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.mockito.internal.configuration.InjectingAnnotationEngine",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.mockito.internal.configuration.plugins.DefaultPluginSwitch",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.mockito.internal.creation.instance.DefaultInstantiatorProvider",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.mockito.internal.creation.proxy.ProxyMockMaker",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.mockito.internal.exceptions.stacktrace.DefaultStackTraceCleanerProvider",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.mockito.internal.util.ConsoleMockitoLogger",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.mockito.internal.util.reflection.ReflectionMemberAccessor",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.mockito.junit.jupiter.MockitoExtension",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.opentest4j.AssertionFailedError",
  "methods":[{"name":"<init>","parameterTypes":["java.lang.String","java.lang.Object","java.lang.Object"] }]
},
{
  "name":"org.robolectric.Robolectric"
},
{
  "name":"org.testcontainers.dockerclient.UnixSocketClientProviderStrategy",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.testcontainers.shaded.com.fasterxml.jackson.databind.ext.Java7SupportImpl",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.testcontainers.shaded.com.github.dockerjava.core.DockerConfigFile",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.testcontainers.shaded.com.github.dockerjava.core.command.AbstrAsyncDockerCmd",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true
},
{
  "name":"org.testcontainers.shaded.com.github.dockerjava.core.command.AbstrDockerCmd",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true
},
{
  "name":"org.testcontainers.shaded.com.github.dockerjava.core.command.CreateContainerCmdImpl",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"org.testcontainers.shaded.com.github.dockerjava.core.command.CreateContainerCmdImpl$NetworkingConfig",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"getEndpointsConfig","parameterTypes":[] }]
},
{
  "name":"org.testcontainers.shaded.com.github.dockerjava.core.command.CreateNetworkCmdImpl",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[
    {"name":"getAttachable","parameterTypes":[] }, 
    {"name":"getCheckDuplicate","parameterTypes":[] }, 
    {"name":"getDriver","parameterTypes":[] }, 
    {"name":"getEnableIPv6","parameterTypes":[] }, 
    {"name":"getInternal","parameterTypes":[] }, 
    {"name":"getIpam","parameterTypes":[] }, 
    {"name":"getLabels","parameterTypes":[] }, 
    {"name":"getName","parameterTypes":[] }, 
    {"name":"getOptions","parameterTypes":[] }
  ]
},
{
  "name":"org.testcontainers.shaded.com.github.dockerjava.core.command.ExecCreateCmdImpl",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[
    {"name":"getContainerId","parameterTypes":[] }, 
    {"name":"getEnv","parameterTypes":[] }, 
    {"name":"getPrivileged","parameterTypes":[] }, 
    {"name":"getUser","parameterTypes":[] }, 
    {"name":"getWorkingDir","parameterTypes":[] }
  ]
},
{
  "name":"org.testcontainers.shaded.com.github.dockerjava.core.command.ExecStartCmdImpl",
  "allDeclaredFields":true,
  "queryAllDeclaredMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"org.testcontainers.shaded.org.awaitility.core.ConditionFactory$1",
  "queryAllDeclaredMethods":true
},
{
  "name":"sun.misc.SharedSecrets"
},
{
  "name":"sun.misc.Unsafe",
  "allDeclaredFields":true,
  "methods":[
    {"name":"arrayBaseOffset","parameterTypes":["java.lang.Class"] }, 
    {"name":"arrayIndexScale","parameterTypes":["java.lang.Class"] }, 
    {"name":"copyMemory","parameterTypes":["long","long","long"] }, 
    {"name":"copyMemory","parameterTypes":["java.lang.Object","long","java.lang.Object","long","long"] }, 
    {"name":"getAndAddLong","parameterTypes":["java.lang.Object","long","long"] }, 
    {"name":"getAndSetObject","parameterTypes":["java.lang.Object","long","java.lang.Object"] }, 
    {"name":"getBoolean","parameterTypes":["java.lang.Object","long"] }, 
    {"name":"getByte","parameterTypes":["long"] }, 
    {"name":"getByte","parameterTypes":["java.lang.Object","long"] }, 
    {"name":"getDouble","parameterTypes":["java.lang.Object","long"] }, 
    {"name":"getFloat","parameterTypes":["java.lang.Object","long"] }, 
    {"name":"getInt","parameterTypes":["long"] }, 
    {"name":"getInt","parameterTypes":["java.lang.Object","long"] }, 
    {"name":"getLong","parameterTypes":["long"] }, 
    {"name":"getLong","parameterTypes":["java.lang.Object","long"] }, 
    {"name":"getObject","parameterTypes":["java.lang.Object","long"] }, 
    {"name":"invokeCleaner","parameterTypes":["java.nio.ByteBuffer"] }, 
    {"name":"objectFieldOffset","parameterTypes":["java.lang.reflect.Field"] }, 
    {"name":"putBoolean","parameterTypes":["java.lang.Object","long","boolean"] }, 
    {"name":"putByte","parameterTypes":["long","byte"] }, 
    {"name":"putByte","parameterTypes":["java.lang.Object","long","byte"] }, 
    {"name":"putDouble","parameterTypes":["java.lang.Object","long","double"] }, 
    {"name":"putFloat","parameterTypes":["java.lang.Object","long","float"] }, 
    {"name":"putInt","parameterTypes":["long","int"] }, 
    {"name":"putInt","parameterTypes":["java.lang.Object","long","int"] }, 
    {"name":"putLong","parameterTypes":["long","long"] }, 
    {"name":"putLong","parameterTypes":["java.lang.Object","long","long"] }, 
    {"name":"putObject","parameterTypes":["java.lang.Object","long","java.lang.Object"] }, 
    {"name":"storeFence","parameterTypes":[] }
  ]
},
{
  "name":"sun.misc.VM"
},
{
  "name":"sun.nio.ch.SelectorImpl",
  "fields":[
    {"name":"publicSelectedKeys"}, 
    {"name":"selectedKeys"}
  ]
},
{
  "name":"sun.security.pkcs12.PKCS12KeyStore",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"sun.security.pkcs12.PKCS12KeyStore$DualFormatPKCS12",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"sun.security.provider.DSA$SHA224withDSA",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"sun.security.provider.DSA$SHA256withDSA",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"sun.security.provider.JavaKeyStore$DualFormatJKS",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"sun.security.provider.JavaKeyStore$JKS",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"sun.security.provider.NativePRNG",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"sun.security.provider.NativePRNG$NonBlocking",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"sun.security.provider.SHA",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"sun.security.provider.SHA2$SHA224",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"sun.security.provider.SHA2$SHA256",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"sun.security.provider.SHA5$SHA384",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"sun.security.provider.SHA5$SHA512",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"sun.security.provider.X509Factory",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"sun.security.provider.certpath.PKIXCertPathValidator",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"sun.security.rsa.PSSParameters",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"sun.security.rsa.RSAKeyFactory$Legacy",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"sun.security.rsa.RSAPSSSignature",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"sun.security.rsa.RSASignature$SHA224withRSA",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"sun.security.rsa.RSASignature$SHA256withRSA",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"sun.security.ssl.SSLContextImpl$TLSContext",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"sun.security.ssl.TrustManagerFactoryImpl$PKIXFactory",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"sun.security.util.ObjectIdentifier"
},
{
  "name":"sun.security.x509.AuthorityInfoAccessExtension",
  "methods":[{"name":"<init>","parameterTypes":["java.lang.Boolean","java.lang.Object"] }]
},
{
  "name":"sun.security.x509.AuthorityKeyIdentifierExtension",
  "methods":[{"name":"<init>","parameterTypes":["java.lang.Boolean","java.lang.Object"] }]
},
{
  "name":"sun.security.x509.BasicConstraintsExtension",
  "methods":[{"name":"<init>","parameterTypes":["java.lang.Boolean","java.lang.Object"] }]
},
{
  "name":"sun.security.x509.CRLDistributionPointsExtension",
  "methods":[{"name":"<init>","parameterTypes":["java.lang.Boolean","java.lang.Object"] }]
},
{
  "name":"sun.security.x509.CertificateExtensions"
},
{
  "name":"sun.security.x509.CertificatePoliciesExtension",
  "methods":[{"name":"<init>","parameterTypes":["java.lang.Boolean","java.lang.Object"] }]
},
{
  "name":"sun.security.x509.ExtendedKeyUsageExtension",
  "methods":[{"name":"<init>","parameterTypes":["java.lang.Boolean","java.lang.Object"] }]
},
{
  "name":"sun.security.x509.IssuerAlternativeNameExtension",
  "methods":[{"name":"<init>","parameterTypes":["java.lang.Boolean","java.lang.Object"] }]
},
{
  "name":"sun.security.x509.KeyUsageExtension",
  "methods":[{"name":"<init>","parameterTypes":["java.lang.Boolean","java.lang.Object"] }]
},
{
  "name":"sun.security.x509.NetscapeCertTypeExtension",
  "methods":[{"name":"<init>","parameterTypes":["java.lang.Boolean","java.lang.Object"] }]
},
{
  "name":"sun.security.x509.PrivateKeyUsageExtension",
  "methods":[{"name":"<init>","parameterTypes":["java.lang.Boolean","java.lang.Object"] }]
},
{
  "name":"sun.security.x509.SubjectAlternativeNameExtension",
  "methods":[{"name":"<init>","parameterTypes":["java.lang.Boolean","java.lang.Object"] }]
},
{
  "name":"sun.security.x509.SubjectKeyIdentifierExtension",
  "methods":[{"name":"<init>","parameterTypes":["java.lang.Boolean","java.lang.Object"] }]
}
]